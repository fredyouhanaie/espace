% -*- mode:erlang -*-

% Example data for Dijkstra's Algorithm
% taken from:
% http://people.sc.fsu.edu/~jburkardt/m_src/dijkstra/dijkstra.html
%
%  N0--15--N2-100--N3
%    \      |      /
%     \     |     /
%      40  20   10
%        \  |  /
%         \ | /
%          N1
%          / \
%         /   \
%        6    25
%       /       \
%      /         \
%     N5----8-----N4
%

{out, {graph, [
	       {n0, [{n1, 40}, {n2, 15}]},
	       {n1, [{n0, 40}, {n2, 20}, {n3, 10}, {n4, 25}, {n5, 6}]},
	       {n2, [{n0, 15}, {n1, 20}, {n3, 100}]},
	       {n3, [{n1, 10}, {n2, 100}]},
	       {n4, [{n1, 25}, {n5, 8}]},
	       {n5, [{n1,  6}, {n4, 8}]}
	      ]
      }
}.

% generate the individual vertex tuples for the whole graph
{worker, {dijkstra, gen_vertex, []}}.

% We need one or more workers to process the next hop tuples
% these workers will work with any {Src,Dst} tuples.
% this is a small graph, so one worker is sufficient
{worker, {dijkstra, nexthop_worker, []}}.

% compute all the shortest paths from n0 to the rest of the vertices
{worker, {dijkstra, compute_sp, [{n0,n1}]}}.
{worker, {dijkstra, compute_sp, [{n0,n2}]}}.
{worker, {dijkstra, compute_sp, [{n0,n3}]}}.
{worker, {dijkstra, compute_sp, [{n0,n4}]}}.
{worker, {dijkstra, compute_sp, [{n0,n5}]}}.
