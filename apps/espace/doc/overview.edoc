
@author Fred Youhanaie <fyrlang@anydata.co.uk>
@copyright 2017 Fred Youhanaie
@version 0.2.0

@doc

<h3>Introduction</h3>

<p><code>espace</code> is an Erlang implementation of the Tuple Spaces
  (or Linda) paradigm. Details of the paradigm can be found on
  Wikipedia for
  <a href="https://en.wikipedia.org/wiki/Linda_(coordination_language)">Linda</a>
  and
  <a href="https://en.wikipedia.org/wiki/Tuple_space">Tuple Spaces</a>.
</p>

<p>Another good source that describes the paradigm well is the
  following paper:</p>

<blockquote>
  <p>Carriero, Nicholas &amp; Gelernter, David. (1989).<br />  How to
    Write Parallel Programs: A Guide to the Perplexed.<br />  ACM
    Computing Surveys. 21. 323-357.</p>
</blockquote>

<p>The basic idea behind tuple spaces is that an application is given
  a storage pool where tuples are added to it via the <code>out</code>
  operation, or taken from the pool via the <code>in/inp</code>
  or <code>rd/rdp</code> operations.</p>

<p>An application created to use this system will have many
  concurrently active worker processes that look, and optionally, wait
  for tuples that match a desired pattern. The waiting workers will
  block until a matching tuple is added to the pool by another worker
  using the <code>out</code> operation.</p>

<p>The worker processes are started via the <code>eval</code>
  operation. A worker can in turn start further workers via
  the <code>eval</code> operation.</p>

<p>A typical application will start with a series of <code>out</code>
  and <code>eval</code> oprations. Some of the worker processes will
  then, using the <code>in</code> or <code>rd</code> operations, pick
  the tuples added via the <code>out</code> operations, process them,
  then <code>out</code> the results. Other worker processes can then
  pick the results and process them further.</p>

<p>The implementation provides a space for the tuples, currently
  <code>ETS</code>, along with the six basic
  operations, <code>eval</code>,
  <code>out</code>, <code>in</code>, <code>inp</code>, <code>rd</code>
  and <code>rdp</code>.</p>

<h3>Organization of the Project Modules</h3>

<p><code>espace</code> has been built as an OTP
  application, <code>espace_app</code>. Presently only one instance of
  the application can run on a given node.</p>

<p>Once the server application is started, the client applications can
  use the <code>espace</code> module to perform any of the six
  operations. In fact, one can kick off the whole process by calling a
  purpose written bootstrap function, which can in turn
  perform <code>out</code> and <code>eval</code> operations.</p>

<p>On the server side there are two main groups of components:</p>

<p>TSPOOL servers handle the Tuple Space Pool:</p>

<ul>

  <li><code>tspool_sup</code> is a <code>supervisor</code> that
    manages the three <code>gen_server</code>s listed below.</li>

  <li><code>tspace_srv</code> is a <code>gen_server</code> that
    manages the <code>out/in/rd/inp/rdp</code> requests. In turn it
    passes the requests to <code>tspool_srv</code></li>

  <li><code>tspool_srv</code> maintains the <code>tspool</code> ETS
    table, the main tuple space pool. If a requested pattern does not
    exist and the request is a blocking one, i.e. <code>in</code>
    or <code>rd</code>, then the pattern is forwarded
    to <code>tspatt_srv</code>. In case of an <code>out</code>
    request, the tuple is stored in the table,
    and <code>tspatt_srv</code> is notified so that it can inform all
    the blocking clients whose requested pattern matches this
    tuple </li>

  <li><code>tspatt_srv</code> maintains the <code>tspatt</code> ETS
    table, which contains the tuple patterns that worker processes are
    blocked on. It receives two types of messages
    from <code>tspool_srv</code>, unmatched patterns, which, along
    with the client details, are then added to the <code>tspatt</code>
    table, and newly added tuples, which are matched against the
    existing patterns in the table and, if matched, blocked clients
    are notified.</li>

</ul>


<p>WKPOOL servers handle the worker pool:</p>

<ul>

  <li><code>wkpool_sup</code> is a <code>supervisor</code> that
    manages worker pool processes, <code>wkpool_srv</code>
    and <code>worker_sup</code></li>

  <li><code>wkpool_srv</code> is a <code>gen_server</code> that will
    receive the <code>eval</code> requests, and pass the request to
    the worker supervisor.</li>

  <li><code>worker_sup</code> is a <code>supervisor</code> that will
    create a new child process with the <code>{M,F,A}</code> function
    supplied with the request.</li>

  <li>Each <code>eval</code> operation, is executed within a child
    process of the <code>simple_one_for_one</code> supervisor. At
    present, no attempt is made to throttle the number
    of <code>eval</code> processes.</li>

</ul>

<h4>The ETS Tables</h4>

<p>The tuples are kept in a pair of ETS tables.</p>

<p>The first table, <code>tspool</code> has two columns, A unique ref,
  and the tuple itself. A
  single <code>gen_server</code>, <code>tspace_srv</code> handles all
  accesses to this table.</p>

<p>For the cases where no matching tuple is found, a second ETS
  table <code>tspatt</code> is used to remember the pattern, the
  client PID and a unique reference for this specific request. The
  unique reference will be used by the
  <code>tspool_srv</code> client side function to block on a receive
  for the unique reference.</p>

<p>Each <code>out</code> operation, after inserting the new tuple,
  will notify <code>tspatt_srv</code> of the new tuple, which will
  then scan the blocking clients whose pattern matches the newly added
  tuple. If a match is found, the waiting client is notified and the
  client entry is removed from the table.</p>

<p>Once the waiting client receives the notification, it will attempt
  the <code>rd</code> or <code>in</code> operation again. Note that
  the client is not handed the tuple, but notified to request it
  again. If more than one client have waiting patterns that match the
  tuple, then they will end up competing for it.</p>

@end

