% -*- mode:erlang -*-

% This is the example graph from the following tutorial:
% http://www.gilles-bertrand.com/2014/03/disjkstra-algorithm-description-shortest-path-pseudo-code-data-structure-example-image.html

{out, {graph, [
	       {s, [{a, 2}, {b, 1}] },
	       {a, [{s, 3}, {b, 4}, {c, 8}] },
	       {b, [{s, 4}, {a, 2}, {d, 2}] },
	       {c, [{a, 2}, {b, 7}, {d, 4}] },
	       {d, [{b, 1}, {c, 11}, {t, 5}] },
	       {t, [{c, 3}, {d, 5}] }
	      ]
      }
}.

% generate the individual vertex tuples for the whole graph
{worker, {dijkstra, gen_vertex, []}}.

% We need one or more workers to process the next hop tuples
% these workers will work with any {Src,Dst} tuples.
% Repeat the following entry for multiple concurrent workers.
{worker, {dijkstra, nexthop_worker, []}}.

% compute all the shortest paths from s to all the vertices.
{worker, {"fun (Src, DstList) ->
		lists:foreach(fun (Dst) ->
				      espace:worker({dijkstra, compute_sp, [{Src, Dst}]})
			      end, DstList)
	end.", [s, [a, b, c, d, s, t]]}}.
% Note, although espace:worker/1 can take fun and string types, for
% this file we can only use strings since it is being read via
% file:consult/1.
